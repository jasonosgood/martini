package martini.util;import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.io.Reader;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * LineReader implements Iterable and wraps a Reader or InputStream and permits using it from within * a Java 5 (JDK 1.5) style for-each loop, thusly: *  *  LineReader reader = new LineReader( "c:\textfile.txt" ); *  for( String line : reader ) *  { *  	System.out.println( line ); *  } *   * The contained Reader/InputStream instance is closed when the loop finishes. It's also wrapped * within a BufferedReader. *  * Lastly, no safety or sanity checks are made to ensure that only a single iterator is created. *  * @author jasonosgood * */public class 	LineReaderimplements 	Iterable<String>{	private BufferedReader _reader = null;	public LineReader( String filename ) 		throws FileNotFoundException	{		this( new File( filename ));	}		public LineReader( File file ) 		throws FileNotFoundException	{		this( new FileReader( file ));	}		public LineReader( InputStream in )	{		this( new InputStreamReader( in ));	}	public LineReader( Reader reader ) 	{		if( reader instanceof BufferedReader )		{			_reader = (BufferedReader) reader;		}		else		{			_reader = new BufferedReader( reader );		}	}	@Override	public Iterator<String> iterator()	{		// TODO: Check to make sure there's only one iterator		return new LineIterator();	}		public List<String> toArray()	{		ArrayList<String> result = new ArrayList<String>();		for( String line : this )		{			result.add( line );		}		return result;	}		public class 		LineIterator	implements		Iterator<String>		{		private String _next;		private boolean	_done = false;			public LineIterator()		{		}				@Override		public boolean hasNext()		{			if( _done ) return false;						if( _next != null ) return true;						try			{				String temp = _reader.readLine();				if( temp == null )				{					_done = true;					try					{						_reader.close();					}					catch( IOException e )					{						e.printStackTrace();					}					_reader = null;				}				else				{					_next = temp;				}			}			catch( IOException e )			{				_done = true;				e.printStackTrace();			}						return hasNext();		}			@Override		public String next()		{			String result = null;			if( hasNext() )			{				result = _next;			}			_next = null;			return result;		}			@Override		public void remove()		{			throw new UnsupportedOperationException( "FileLineIterator.remove()" );		}			}	public void close() 		throws IOException	{		if( _reader != null )		{			_reader.close();		}	}			public static void main( String[] args ) 		throws Exception	{		PrintWriter writer = new PrintWriter( "filelineiterator.txt" );		writer.println( "apple" );		writer.println( "banana" );		writer.println();		writer.println( "cherry" );		writer.close();		LineReader reader = new LineReader( "filelineiterator.txt" );		for( String line : reader )		{			System.out.println( line );		}				reader.close();	}}